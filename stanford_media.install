<?php

/**
 * @file
 * stanford_media.install
 */

use Drupal\views\Entity\View;
use Drupal\Core\Entity\Entity\EntityViewDisplay;

/**
 * Enable new submodule.
 */
function stanford_media_update_8001() {
  \Drupal::service('module_installer')->install(['media_duplicate_validation']);
}

/**
 * Update the media view.
 */
function stanford_media_update_8002() {
  $view = View::load('media_entity_browser');
  $list_display = &$view->getDisplay('use_list');
  $list_display['display_options']['fields']['source_id'] = [
    'id' => 'source_id',
    'field' => 'source_id',
    'group_type' => 'count_distinct',
  ];
  $list_display['display_options']['fields']['source_id'] += $list_display['display_options']['fields']['count'];
  unset($list_display['display_options']['fields']['count']);

  // Move operations column to the end.
  $operations = $list_display['display_options']['fields']['operations'];
  unset($list_display['display_options']['fields']['operations']);
  $list_display['display_options']['fields']['operations'] = $operations;

  $view->save();
}

/**
 * Change video embed field thumbnail to a lazy loading video.
 */
function stanford_media_update_8003() {
  $display = EntityViewDisplay::load('media.video.default');

  $display_options = [
    'label' => 'hidden',
    'type' => 'video_embed_field_lazyload',
    'settings' => [
      'image_style' => 'medium',
      'autoplay' => TRUE,
      'width' => 200,
      'height' => 133,
      'responsive' => FALSE,
    ],
  ];
  $display->setComponent('field_media_video_embed_field', $display_options);
  $display->save();
}

/**
 * Move inline image alt text into a contrib supported attribute.
 */
function stanford_media_update_8004() {
  foreach (_stanford_media_update_8004_get_filter_fields() as $field) {
    list($entity_type, $field_name) = explode(':', $field);

    try {
      $entity_ids = \Drupal::entityQuery($entity_type)
        ->condition($field_name, '%alt_text&quot%', 'LIKE')
        ->execute();
    }
    catch (Exception $e) {
      continue;
    }

    $entity_storage = \Drupal::entityTypeManager()->getStorage($entity_type);
    foreach ($entity_storage->loadMultiple($entity_ids) as $entity) {
      $field_values = $entity->get($field_name)->getValue();

      foreach ($field_values as &$field_value) {
        $field_value['value'] = _stanford_media_update_8004_fix_alt($field_value['value']);
      }

      $entity->set($field_name, $field_values);
      $entity->save();
    }
  }
}

/**
 * Get a list of all fields that are filtered.
 *
 * @return array
 *   Array of values with entity type and field name.
 */
function _stanford_media_update_8004_get_filter_fields() {
  $field_manager = \Drupal::service('entity_field.manager');
  $filtered_text_fields = ['text', 'text_long', 'text_with_summary'];

  $filtered_fields = [];
  foreach ($field_manager->getFieldMap() as $entity_type => $fields) {
    foreach ($fields as $field_name => $field_info) {
      if (!in_array($field_info['type'], $filtered_text_fields)) {
        continue;
      }

      $filtered_fields[] = "$entity_type:$field_name";
    }
  }
  asort($filtered_fields);
  return array_unique($filtered_fields);
}

/**
 * Move the alt_text value in the json data into an `alt` attribute.
 *
 * @param string $html
 *   Original Html with the embed entity tag.
 *
 * @return string
 *   Fixed html.
 */
function _stanford_media_update_8004_fix_alt($html) {
  preg_match_all("/<drupal-entity.*?\/drupal-entity>/s", $html, $tokens);
  foreach ($tokens[0] as $token) {
    // Existing tokens already use the contrib attribute or dont use an alt at
    // all.
    if (strpos($token, ' alt="') !== FALSE || strpos($token, 'alt_text&quot') === FALSE) {
      continue;
    }

    $new_token = $token;

    preg_match("/data-entity-embed-display-settings=\".*?\"/", $new_token, $settings);
    $display_settings = str_replace('data-entity-embed-display-settings="', '', $settings[0]);
    $display_settings = substr($display_settings, 0, -1);
    $display_settings = json_decode(htmlspecialchars_decode($display_settings), TRUE);

    $alt_text = $display_settings['alt_text'];
    unset($display_settings['alt_text']);
    $new_token = str_replace($settings[0], 'data-entity-embed-display-settings="' . htmlspecialchars(json_encode($display_settings)) . '"', $new_token);

    $new_token = str_replace('<drupal-entity ', "<drupal-entity alt=\"$alt_text\" ", $new_token);

    $html = str_replace($token, $new_token, $html);
  }
  return $html;
}
