<?php

/**
 * @file
 * Contains media_duplicate_validation.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function media_duplicate_validation_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the media_duplicate_validation module.
    case 'help.page.media_duplicate_validation':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Media Validation plugins to help prevent duplication of media items') . '</p>';
      return $output;

    default:
  }
}

function media_duplicate_validation_test_images() {
  /** @var \Drupal\media_duplicate_validation\Plugin\MediaDuplicateValidationManager $duplicate_manager */
  $duplicate_manager = \Drupal::service('plugin.manager.media_duplicate_validation');

  $image = 'public://media/image/small_lake.jpg';

  foreach ($duplicate_manager->getDefinitions() as $definition) {
    /** @var \Drupal\media_duplicate_validation\Plugin\MediaDuplicateValidationInterface $plugin */
    $plugin = $duplicate_manager->createInstance($definition['id']);
    dpm(($definition['id']));
    dpm($plugin->isUnique($image));
    dpm($plugin->getSimilarItems($image));
  }

    $small = 'public://media/image/small_lake.jpg';
    $large = 'public://media/image/lake_0.jpg';
  //  $color_mean = new \Drupal\media_duplicate_validation\Plugin\MediaDuplicateValidation\ColorMean();
  //  dpm($color_mean->compare($small, $large));
  //
  //  $john = 'public://media/capx/john-bickar1509507710422.jpg';
  //  dpm($color_mean->compare($john, $large));
}

function  media_duplicate_validation_mimeType($path) {
  $mime = getimagesize($path);
  $return = [$mime[0], $mime[1]];

  switch ($mime['mime']) {
    case 'image/jpeg':
      $return[] = 'jpg';
      return $return;
    case 'image/png':
      $return[] = 'png';
      return $return;
    default:
      return FALSE;
  }
}

function media_duplicate_validation_createImage($path) {
  $mime = media_duplicate_validation_mimeType($path);

  if ($mime[2] == 'jpg') {
    return imagecreatefromjpeg($path);
  }
  else {
    if ($mime[2] == 'png') {
      return imagecreatefrompng($path);
    }
    else {
      return FALSE;
    }
  }
}

function resize_image($path){
  $dimension = 50;
  $mime = media_duplicate_validation_mimeType($path);
  $t = imagecreatetruecolor($dimension, $dimension);

  $source = media_duplicate_validation_createImage($path);

  imagecopyresized($t, $source, 0, 0, 0, 0, $dimension, $dimension, $mime[0], $mime[1]);

  return $t;
}

function media_duplicate_validation_check_images() {

  $img1 = 'public://media/image/small_lake.jpg';
  $img2 = 'public://media/image/lake_0.jpg';

  // create images
  $i1 = resize_image($img1);
  $i2 = resize_image($img2);

  // dimensions of the first image
  $sx1 = imagesx($i1);
  $sy1 = imagesy($i1);

  // create a diff image
  $diffi = imagecreatetruecolor($sx1, $sy1);
  $green = imagecolorallocate($diffi, 0, 255, 0);
  imagefill($diffi, 0, 0, imagecolorallocate($diffi, 0, 0, 0));

  // increment this counter when encountering a pixel diff
  $different_pixels = 0;

  // loop x and y
  for ($x = 0; $x < $sx1; $x++) {
    for ($y = 0; $y < $sy1; $y++) {

      $rgb1 = imagecolorat($i1, $x, $y);
      $pix1 = imagecolorsforindex($i1, $rgb1);

      $rgb2 = imagecolorat($i2, $x, $y);
      $pix2 = imagecolorsforindex($i2, $rgb2);

      if ($pix1 !== $pix2) { // different pixel
        // increment and paint in the diff image
        $different_pixels++;
        imagesetpixel($diffi, $x, $y, $green);
      }

    }
  }

  if (!$different_pixels) {
    return "Image is the same";
  }
  else {
//    if (empty($argv[3])) {
//      $argv[3] = 'diffy.png'; // default result filename
//    }
//    imagepng($diffi, $argv[3]);
    $total = $sx1 * $sy1;
  }
  return "$different_pixels/$total different pixels, or " . number_format(100 * $different_pixels / $total, 2) . '%';
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function media_duplicate_validation_media_insert(EntityInterface $entity) {
  /** @var \Drupal\media_duplicate_validation\Plugin\MediaDuplicateValidationManager $duplicate_manager */
  $duplicate_manager = \Drupal::service('plugin.manager.media_duplicate_validation');

  foreach ($duplicate_manager->getDefinitions() as $definition) {
    /** @var \Drupal\media_duplicate_validation\Plugin\MediaDuplicateValidationInterface $plugin */
    $plugin = $duplicate_manager->createInstance($definition['id']);
    $plugin->mediaSave($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function media_duplicate_validation_media_update(EntityInterface $entity) {
  media_duplicate_validation_media_insert($entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function media_duplicate_validation_media_delete(EntityInterface $entity) {
  /** @var \Drupal\media_duplicate_validation\Plugin\MediaDuplicateValidationManager $duplicate_manager */
  $duplicate_manager = \Drupal::service('plugin.manager.media_duplicate_validation');

  foreach ($duplicate_manager->getDefinitions() as $definition) {
    /** @var \Drupal\media_duplicate_validation\Plugin\MediaDuplicateValidationInterface $plugin */
    $plugin = $duplicate_manager->createInstance($definition['id']);
    $plugin->mediaDelete($entity);
  }
}
